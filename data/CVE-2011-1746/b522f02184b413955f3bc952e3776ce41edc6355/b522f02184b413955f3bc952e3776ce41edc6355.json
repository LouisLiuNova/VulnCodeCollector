{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "b522f02184b413955f3bc952e3776ce41edc6355",
    "commit_massage": "agp: fix OOM and buffer overflow\n\npage_count is copied from userspace.  agp_allocate_memory() tries to\ncheck whether this number is too big, but doesn't take into account the\nwrap case.  Also agp_create_user_memory() doesn't check whether\nalloc_size is calculated from num_agp_pages variable without overflow.\nThis may lead to allocation of too small buffer with following buffer\noverflow.\n\nAnother problem in agp code is not addressed in the patch - kernel memory\nexhaustion (AGPIOC_RESERVE and AGPIOC_ALLOCATE ioctls).  It is not checked\nwhether requested pid is a pid of the caller (no check in agpioc_reserve_wrap()).\nEach allocation is limited to 16KB, though, there is no per-process limit.\nThis might lead to OOM situation, which is not even solved in case of the\ncaller death by OOM killer - the memory is allocated for another (faked) process.\n\nSigned-off-by: Vasiliy Kulikov <segoon@openwall.com>\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/b522f02184b413955f3bc952e3776ce41edc6355",
    "html_ref": "https://github.com/torvalds/linux/commit/b522f02184b413955f3bc952e3776ce41edc6355",
    "author": "segoon",
    "changes_stats": {
        "total": 8,
        "additions": 7,
        "deletions": 1
    },
    "files": [
        {
            "sha": "850a643ad694ff5022d3e51e0b061ad1eca9ef61",
            "filename": "drivers/char/agp/generic.c",
            "status": "modified",
            "additions": 7,
            "deletions": 1,
            "changes": 8,
            "blob_url": "https://github.com/torvalds/linux/blob/b522f02184b413955f3bc952e3776ce41edc6355/drivers%2Fchar%2Fagp%2Fgeneric.c",
            "raw_url": "https://github.com/torvalds/linux/raw/b522f02184b413955f3bc952e3776ce41edc6355/drivers%2Fchar%2Fagp%2Fgeneric.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/drivers%2Fchar%2Fagp%2Fgeneric.c?ref=b522f02184b413955f3bc952e3776ce41edc6355",
            "patch": "@@ -115,6 +115,9 @@ static struct agp_memory *agp_create_user_memory(unsigned long num_agp_pages)\n \tstruct agp_memory *new;\n \tunsigned long alloc_size = num_agp_pages*sizeof(struct page *);\n \n+\tif (INT_MAX/sizeof(struct page *) < num_agp_pages)\n+\t\treturn NULL;\n+\n \tnew = kzalloc(sizeof(struct agp_memory), GFP_KERNEL);\n \tif (new == NULL)\n \t\treturn NULL;\n@@ -234,11 +237,14 @@ struct agp_memory *agp_allocate_memory(struct agp_bridge_data *bridge,\n \tint scratch_pages;\n \tstruct agp_memory *new;\n \tsize_t i;\n+\tint cur_memory;\n \n \tif (!bridge)\n \t\treturn NULL;\n \n-\tif ((atomic_read(&bridge->current_memory_agp) + page_count) > bridge->max_memory_agp)\n+\tcur_memory = atomic_read(&bridge->current_memory_agp);\n+\tif ((cur_memory + page_count > bridge->max_memory_agp) ||\n+\t    (cur_memory + page_count < page_count))\n \t\treturn NULL;\n \n \tif (type >= AGP_USER_TYPES) {"
        }
    ],
    "parent_commit_sha": "204ae24dc71f794aaad4df48a0083dfedc711afb"
}