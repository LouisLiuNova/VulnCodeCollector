{
    "owner": "qemu",
    "repo": "qemu",
    "commit_sha": "f0dce23475b5af5da6b17b97c1765271307734b6",
    "commit_massage": "dmg: prevent chunk buffer overflow (CVE-2014-0145)\n\nBoth compressed and uncompressed I/O is buffered.  dmg_open() calculates\nthe maximum buffer size needed from the metadata in the image file.\n\nThere is currently a buffer overflow since ->lengths[] is accounted\nagainst the maximum compressed buffer size but actually uses the\nuncompressed buffer:\n\n  switch (s->types[chunk]) {\n  case 1: /* copy */\n      ret = bdrv_pread(bs->file, s->offsets[chunk],\n                       s->uncompressed_chunk, s->lengths[chunk]);\n\nWe must account against the maximum uncompressed buffer size for type=1\nchunks.\n\nThis patch fixes the maximum buffer size calculation to take into\naccount the chunk type.  It is critical that we update the correct\nmaximum since there are two buffers ->compressed_chunk and\n->uncompressed_chunk.\n\nSigned-off-by: Stefan Hajnoczi <stefanha@redhat.com>\nSigned-off-by: Kevin Wolf <kwolf@redhat.com>\nReviewed-by: Max Reitz <mreitz@redhat.com>\nSigned-off-by: Stefan Hajnoczi <stefanha@redhat.com>",
    "raw_ref": "https://api.github.com/repos/qemu/qemu/commits/f0dce23475b5af5da6b17b97c1765271307734b6",
    "html_ref": "https://github.com/qemu/qemu/commit/f0dce23475b5af5da6b17b97c1765271307734b6",
    "author": "stefanhaRH",
    "changes_stats": {
        "total": 39,
        "additions": 33,
        "deletions": 6
    },
    "files": [
        {
            "sha": "856402e1f2fed8948b97cac207a2ee96537196dd",
            "filename": "block/dmg.c",
            "status": "modified",
            "additions": 33,
            "deletions": 6,
            "changes": 39,
            "blob_url": "https://github.com/qemu/qemu/blob/f0dce23475b5af5da6b17b97c1765271307734b6/block%2Fdmg.c",
            "raw_url": "https://github.com/qemu/qemu/raw/f0dce23475b5af5da6b17b97c1765271307734b6/block%2Fdmg.c",
            "contents_url": "https://api.github.com/repos/qemu/qemu/contents/block%2Fdmg.c?ref=f0dce23475b5af5da6b17b97c1765271307734b6",
            "patch": "@@ -100,6 +100,37 @@ static int read_uint32(BlockDriverState *bs, int64_t offset, uint32_t *result)\n     return 0;\n }\n \n+/* Increase max chunk sizes, if necessary.  This function is used to calculate\n+ * the buffer sizes needed for compressed/uncompressed chunk I/O.\n+ */\n+static void update_max_chunk_size(BDRVDMGState *s, uint32_t chunk,\n+                                  uint32_t *max_compressed_size,\n+                                  uint32_t *max_sectors_per_chunk)\n+{\n+    uint32_t compressed_size = 0;\n+    uint32_t uncompressed_sectors = 0;\n+\n+    switch (s->types[chunk]) {\n+    case 0x80000005: /* zlib compressed */\n+        compressed_size = s->lengths[chunk];\n+        uncompressed_sectors = s->sectorcounts[chunk];\n+        break;\n+    case 1: /* copy */\n+        uncompressed_sectors = (s->lengths[chunk] + 511) / 512;\n+        break;\n+    case 2: /* zero */\n+        uncompressed_sectors = s->sectorcounts[chunk];\n+        break;\n+    }\n+\n+    if (compressed_size > *max_compressed_size) {\n+        *max_compressed_size = compressed_size;\n+    }\n+    if (uncompressed_sectors > *max_sectors_per_chunk) {\n+        *max_sectors_per_chunk = uncompressed_sectors;\n+    }\n+}\n+\n static int dmg_open(BlockDriverState *bs, QDict *options, int flags,\n                     Error **errp)\n {\n@@ -245,12 +276,8 @@ static int dmg_open(BlockDriverState *bs, QDict *options, int flags,\n                     goto fail;\n                 }\n \n-                if (s->lengths[i] > max_compressed_size) {\n-                    max_compressed_size = s->lengths[i];\n-                }\n-                if (s->sectorcounts[i] > max_sectors_per_chunk) {\n-                    max_sectors_per_chunk = s->sectorcounts[i];\n-                }\n+                update_max_chunk_size(s, i, &max_compressed_size,\n+                                      &max_sectors_per_chunk);\n             }\n             s->n_chunks += chunk_count;\n         }"
        }
    ],
    "parent_commit_sha": "686d7148ec23402a172628c800022b3a95a022c9"
}