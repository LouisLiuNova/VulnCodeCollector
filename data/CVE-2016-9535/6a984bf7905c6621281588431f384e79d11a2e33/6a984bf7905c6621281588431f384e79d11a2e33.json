{"owner": "vadz", "repo": "libtiff", "commit_sha": "6a984bf7905c6621281588431f384e79d11a2e33", "commit_massage": "* libtiff/tif_predic.c: fix memory leaks in error code paths added in\nprevious commit (fix for MSVR 35105)", "raw_ref": "https://api.github.com/repos/vadz/libtiff/commits/6a984bf7905c6621281588431f384e79d11a2e33", "html_ref": "https://github.com/vadz/libtiff/commit/6a984bf7905c6621281588431f384e79d11a2e33", "author": "erouault", "changes_stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "48fb75d3657ce254c9b48551004fe4c0ea97f42c", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/vadz/libtiff/blob/6a984bf7905c6621281588431f384e79d11a2e33/ChangeLog", "raw_url": "https://github.com/vadz/libtiff/raw/6a984bf7905c6621281588431f384e79d11a2e33/ChangeLog", "contents_url": "https://api.github.com/repos/vadz/libtiff/contents/ChangeLog?ref=6a984bf7905c6621281588431f384e79d11a2e33", "patch": "@@ -1,3 +1,8 @@\n+2016-11-04 Even Rouault <even.rouault at spatialys.com>\n+\n+\t* libtiff/tif_predic.c: fix memory leaks in error code paths added in\n+\tprevious commit (fix for MSVR 35105)\n+\n 2016-10-31 Even Rouault <even.rouault at spatialys.com>\n \n \t* libtiff/tif_predict.h, libtiff/tif_predict.c:"}, {"sha": "3f42f3b3175b1ef1f2516a669bc8c6b078310d35", "filename": "libtiff/tif_predict.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/vadz/libtiff/blob/6a984bf7905c6621281588431f384e79d11a2e33/libtiff%2Ftif_predict.c", "raw_url": "https://github.com/vadz/libtiff/raw/6a984bf7905c6621281588431f384e79d11a2e33/libtiff%2Ftif_predict.c", "contents_url": "https://api.github.com/repos/vadz/libtiff/contents/libtiff%2Ftif_predict.c?ref=6a984bf7905c6621281588431f384e79d11a2e33", "patch": "@@ -409,7 +409,7 @@ fpAcc(TIFF* tif, uint8* cp0, tmsize_t cc)\n \ttmsize_t wc = cc / bps;\n \ttmsize_t count = cc;\n \tuint8 *cp = (uint8 *) cp0;\n-\tuint8 *tmp = (uint8 *)_TIFFmalloc(cc);\n+\tuint8 *tmp;\n \n     if(cc%(bps*stride)!=0)\n     {\n@@ -418,6 +418,7 @@ fpAcc(TIFF* tif, uint8* cp0, tmsize_t cc)\n         return 0;\n     }\n \n+    tmp = (uint8 *)_TIFFmalloc(cc);\n \tif (!tmp)\n \t\treturn 0;\n \n@@ -640,14 +641,16 @@ fpDiff(TIFF* tif, uint8* cp0, tmsize_t cc)\n \ttmsize_t wc = cc / bps;\n \ttmsize_t count;\n \tuint8 *cp = (uint8 *) cp0;\n-\tuint8 *tmp = (uint8 *)_TIFFmalloc(cc);\n+\tuint8 *tmp;\n \n     if((cc%(bps*stride))!=0)\n     {\n         TIFFErrorExt(tif->tif_clientdata, \"fpDiff\",\n                      \"%s\", \"(cc%(bps*stride))!=0\");\n         return 0;\n     }\n+\n+    tmp = (uint8 *)_TIFFmalloc(cc);\n \tif (!tmp)\n \t\treturn 0;\n \n@@ -722,6 +725,7 @@ PredictorEncodeTile(TIFF* tif, uint8* bp0, tmsize_t cc0, uint16 s)\n     {\n         TIFFErrorExt(tif->tif_clientdata, \"PredictorEncodeTile\",\n                      \"%s\", \"(cc0%rowsize)!=0\");\n+        _TIFFfree( working_copy );\n         return 0;\n     }\n \twhile (cc > 0) {"}], "parent_commit_sha": "3ca657a8793dd011bf869695d72ad31c779c3cc1"}