{
    "owner": "radare",
    "repo": "radare2",
    "commit_sha": "f41e941341e44aa86edd4483c4487ec09a074257",
    "commit_massage": "Fix #6885 - oob write in dalvik_disassemble",
    "raw_ref": "https://api.github.com/repos/radareorg/radare2/commits/f41e941341e44aa86edd4483c4487ec09a074257",
    "html_ref": "https://github.com/radareorg/radare2/commit/f41e941341e44aa86edd4483c4487ec09a074257",
    "author": "h4ng3r",
    "changes_stats": {
        "total": 118,
        "additions": 59,
        "deletions": 59
    },
    "files": [
        {
            "sha": "15654b30e584a65cf3f67068dce072e61324c7c1",
            "filename": "libr/asm/p/asm_dalvik.c",
            "status": "modified",
            "additions": 59,
            "deletions": 59,
            "changes": 118,
            "blob_url": "https://github.com/radareorg/radare2/blob/f41e941341e44aa86edd4483c4487ec09a074257/libr%2Fasm%2Fp%2Fasm_dalvik.c",
            "raw_url": "https://github.com/radareorg/radare2/raw/f41e941341e44aa86edd4483c4487ec09a074257/libr%2Fasm%2Fp%2Fasm_dalvik.c",
            "contents_url": "https://api.github.com/repos/radareorg/radare2/contents/libr%2Fasm%2Fp%2Fasm_dalvik.c?ref=f41e941341e44aa86edd4483c4487ec09a074257",
            "patch": "@@ -26,7 +26,7 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t{\n \t\t\t\tunsigned short array_size = buf[2] | (buf[3] << 8);\n \t\t\t\tint first_key = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);\n-\t\t\t\tsprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key);\n+\t\t\t\tsnprintf (op->buf_asm, sizeof(op->buf_asm), \"packed-switch-payload %d, %d\", array_size, first_key);\n \t\t\t\tsize = 8;\n \t\t\t\tpayload = 2 * (array_size * 2);\n \t\t\t\tlen = 0;\n@@ -38,7 +38,7 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t// int[size] relative offsets\n \t\t\t{\n \t\t\t\tunsigned short array_size = buf[2] | (buf[3] << 8);\n-\t\t\t\tsprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size);\n+\t\t\t\tsnprintf (op->buf_asm, sizeof (op->buf_asm), \"sparse-switch-payload %d\", array_size);\n \t\t\t\tsize = 4;\n \t\t\t\tpayload = 2 * (array_size*4);\n \t\t\t\tlen = 0;\n@@ -74,37 +74,37 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\tcase fmtopvAvB:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBBB:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (buf[3] << 8) | buf[2];\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAAAvBBBB: // buf[1] seems useless :/\n \t\t\tvA = (buf[3] << 8) | buf[2];\n \t\t\tvB = (buf[5] << 8) | buf[4];\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAA:\n \t\t\tvA = (int) buf[1];\n-\t\t\tsprintf (str, \" v%i\", vA);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i\", vA);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAcB:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n-\t\t\tsprintf (str, \" v%i, %#x\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, %#x\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAcBBBB:\n \t\t\tvA = (int) buf[1];\n \t\t\t{\n \t\t\t\tshort sB = (buf[3] << 8) | buf[2];\n-\t\t\t\tsprintf (str, \" v%i, %#04hx\", vA, sB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %#04hx\", vA, sB);\n \t\t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\t}\n \t\t\tbreak;\n@@ -137,33 +137,33 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t\t((llint)buf[6] << 32) | ((llint)buf[7] << 40)|\n \t\t\t\t((llint)buf[8] << 48) | ((llint)buf[9] << 56);\n \t\t\t#undef llint\n-\t\t\tsprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBvCC:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) buf[2];\n \t\t\tvC = (int) buf[3];\n-\t\t\tsprintf (str, \" v%i, v%i, v%i\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, v%i\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBcCC:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) buf[2];\n \t\t\tvC = (int) buf[3];\n-\t\t\tsprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAvBcCCCC:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n \t\t\tvC = (buf[3] << 8) | buf[2];\n-\t\t\tsprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoppAA:\n \t\t\tvA = (char) buf[1];\n-\t\t\t//sprintf (str, \" %i\", vA*2); // vA : word -> byte\n+\t\t\t//snprintf (str, sizeof (str), \" %i\", vA*2); // vA : word -> byte\n \t\t\tsnprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA * 2)); // vA : word -> byte\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -175,21 +175,21 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\tcase fmtopvAApBBBB: // if-*z\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) (buf[3] << 8 | buf[2]);\n-\t\t\t//sprintf (str, \" v%i, %i\", vA, vB);\n+\t\t\t//snprintf (str, sizeof (str), \" v%i, %i\", vA, vB);\n \t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x, vA, a->pc + (vB * 2));\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoppAAAAAAAA:\n \t\t\tvA = (int) (buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24));\n-\t\t\t//sprintf (str, \" %#08x\", vA*2); // vA: word -> byte\n+\t\t\t//snprintf (str, sizeof (str), \" %#08x\", vA*2); // vA: word -> byte\n \t\t\tsnprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA*2)); // vA : word -> byte\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAvBpCCCC: // if-*\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n \t\t\tvC = (int) (buf[3] << 8 | buf[2]);\n-\t\t\t//sprintf (str, \" v%i, v%i, %i\", vA, vB, vC);\n+\t\t\t//snprintf (str, sizeof (str), \" v%i, v%i, %i\", vA, vB, vC);\n \t\t\tsnprintf (str, sizeof (str),\" v%i, v%i, 0x%08\"PFMT64x, vA, vB, a->pc + (vC * 2));\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -205,57 +205,57 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t*str = 0;\n \t\t\tswitch (vA) {\n \t\t\tcase 1:\n-\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 2:\n-\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tcase 3:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 4:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n-\t\t\tsprintf (str, \", [%04x]\", vB);\n+\t\t\tsnprintf (str, sizeof (str), \", [%04x]\", vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoptinlineIR:\n \t\tcase fmtoptinvokeVSR:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tvC = (buf[5] << 8) | buf[4];\n-\t\t\tsprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoptinvokeVS:\n \t\t\tvA = (int) (buf[1] & 0xf0) >> 4;\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tswitch (vA) {\n \t\t\tcase 1:\n-\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 2:\n-\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tcase 3:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 4:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n-\t\t\tsprintf (str, \", [%04x]\", vB);\n+\t\t\tsnprintf (str, sizeof (str), \", [%04x]\", vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAtBBBB: // \"sput-*\"\n@@ -264,23 +264,23 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x1a) {\n \t\t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);\n \t\t\t\tif (offset == -1) {\n-\t\t\t\t\tsprintf (str, \" v%i, string+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t\t}\n \t\t\t} else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (!flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, class+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, class+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, %s\", vA, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'f', vB);\n \t\t\t\tif (!flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, field+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, field+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, %s\", vA, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -291,9 +291,9 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvC = (buf[3]<<8) | buf[2];\n \t\t\toffset = R_ASM_GET_OFFSET (a, 'o', vC);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, [obj+%04x]\", vA, vB, vC);\n \t\t\t} else {\n-\t\t\t\tsprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -302,9 +302,9 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\toffset = R_ASM_GET_OFFSET (a, 't', vB);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, thing+%i\", vA, vB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, thing+%i\", vA, vB);\n \t\t\t} else {\n-\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -315,18 +315,18 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x20 || buf[0] == 0x23) { //instance-of & new-array\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vC);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, class+%i\", vA, vB, vC);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, class+%i\", vA, vB, vC);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'f', vC);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, field+%i\", vA, vB, vC);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, field+%i\", vA, vB, vC);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -336,10 +336,10 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (int) (buf[5] | (buf[4] << 8) | (buf[3] << 16) | (buf[2] << 24));\n \t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, string+%i\", vA, vB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -350,18 +350,18 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x25) { // filled-new-array/range\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'm', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -371,40 +371,40 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tswitch (vA) {\n \t\t\t\tcase 1:\n-\t\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 2:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 3:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 4:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 5:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4, buf[1] & 0x0f); // TOODO: recheck this\n \t\t\t\t\tbreak;\n \t\t\t\tdefault:\n-\t\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tif (buf[0] == 0x24) { // filled-new-array\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \", %s ; 0x%x\", flag_str, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \", class+%i\", vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", class+%i\", vB);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'm', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \", %s ; 0x%x\", flag_str, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \", method+%i\", vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", method+%i\", vB);\n \t\t\t\t}\n \n \t\t\t}"
        }
    ],
    "parent_commit_sha": "3cc86045837f32a1059a77d3553c10e19b4038a4"
}