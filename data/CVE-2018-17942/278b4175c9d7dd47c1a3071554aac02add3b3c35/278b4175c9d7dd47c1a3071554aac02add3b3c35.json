{
    "owner": "coreutils",
    "repo": "gnulib",
    "commit_sha": "278b4175c9d7dd47c1a3071554aac02add3b3c35",
    "commit_massage": "vasnprintf: Fix heap memory overrun bug.\n\nReported by Ben Pfaff <blp@cs.stanford.edu> in\n<https://lists.gnu.org/archive/html/bug-gnulib/2018-09/msg00107.html>.\n\n* lib/vasnprintf.c (convert_to_decimal): Allocate one more byte of\nmemory.\n* tests/test-vasnprintf.c (test_function): Add another test.",
    "raw_ref": "https://api.github.com/repos/coreutils/gnulib/commits/278b4175c9d7dd47c1a3071554aac02add3b3c35",
    "html_ref": "https://github.com/coreutils/gnulib/commit/278b4175c9d7dd47c1a3071554aac02add3b3c35",
    "author": "bhaible",
    "changes_stats": {
        "total": 34,
        "additions": 32,
        "deletions": 2
    },
    "files": [
        {
            "sha": "904a5185e0db3c0b55d3a3fc59b602b3f09472c8",
            "filename": "ChangeLog",
            "status": "modified",
            "additions": 9,
            "deletions": 0,
            "changes": 9,
            "blob_url": "https://github.com/coreutils/gnulib/blob/278b4175c9d7dd47c1a3071554aac02add3b3c35/ChangeLog",
            "raw_url": "https://github.com/coreutils/gnulib/raw/278b4175c9d7dd47c1a3071554aac02add3b3c35/ChangeLog",
            "contents_url": "https://api.github.com/repos/coreutils/gnulib/contents/ChangeLog?ref=278b4175c9d7dd47c1a3071554aac02add3b3c35",
            "patch": "@@ -1,3 +1,12 @@\n+2018-09-23  Bruno Haible  <bruno@clisp.org>\n+\n+\tvasnprintf: Fix heap memory overrun bug.\n+\tReported by Ben Pfaff <blp@cs.stanford.edu> in\n+\t<https://lists.gnu.org/archive/html/bug-gnulib/2018-09/msg00107.html>.\n+\t* lib/vasnprintf.c (convert_to_decimal): Allocate one more byte of\n+\tmemory.\n+\t* tests/test-vasnprintf.c (test_function): Add another test.\n+\n 2018-09-19  Paul Eggert  <eggert@cs.ucla.edu>\n \n \tmaint: mktime.c now shared with glibc"
        },
        {
            "sha": "30d021b2847d47ee73611f4f52c7028d0b999d9a",
            "filename": "lib/vasnprintf.c",
            "status": "modified",
            "additions": 3,
            "deletions": 1,
            "changes": 4,
            "blob_url": "https://github.com/coreutils/gnulib/blob/278b4175c9d7dd47c1a3071554aac02add3b3c35/lib%2Fvasnprintf.c",
            "raw_url": "https://github.com/coreutils/gnulib/raw/278b4175c9d7dd47c1a3071554aac02add3b3c35/lib%2Fvasnprintf.c",
            "contents_url": "https://api.github.com/repos/coreutils/gnulib/contents/lib%2Fvasnprintf.c?ref=278b4175c9d7dd47c1a3071554aac02add3b3c35",
            "patch": "@@ -860,7 +860,9 @@ convert_to_decimal (mpn_t a, size_t extra_zeroes)\n   size_t a_len = a.nlimbs;\n   /* 0.03345 is slightly larger than log(2)/(9*log(10)).  */\n   size_t c_len = 9 * ((size_t)(a_len * (GMP_LIMB_BITS * 0.03345f)) + 1);\n-  char *c_ptr = (char *) malloc (xsum (c_len, extra_zeroes));\n+  /* We need extra_zeroes bytes for zeroes, followed by c_len bytes for the\n+     digits of a, followed by 1 byte for the terminating NUL.  */\n+  char *c_ptr = (char *) malloc (xsum (xsum (extra_zeroes, c_len), 1));\n   if (c_ptr != NULL)\n     {\n       char *d_ptr = c_ptr;"
        },
        {
            "sha": "93d81d7041c58a5384d7ca06c0917ab70bc1509b",
            "filename": "tests/test-vasnprintf.c",
            "status": "modified",
            "additions": 20,
            "deletions": 1,
            "changes": 21,
            "blob_url": "https://github.com/coreutils/gnulib/blob/278b4175c9d7dd47c1a3071554aac02add3b3c35/tests%2Ftest-vasnprintf.c",
            "raw_url": "https://github.com/coreutils/gnulib/raw/278b4175c9d7dd47c1a3071554aac02add3b3c35/tests%2Ftest-vasnprintf.c",
            "contents_url": "https://api.github.com/repos/coreutils/gnulib/contents/tests%2Ftest-vasnprintf.c?ref=278b4175c9d7dd47c1a3071554aac02add3b3c35",
            "patch": "@@ -53,7 +53,26 @@ test_function (char * (*my_asnprintf) (char *, size_t *, const char *, ...))\n       ASSERT (result != NULL);\n       ASSERT (strcmp (result, \"12345\") == 0);\n       ASSERT (length == 5);\n-      if (size < 6)\n+      if (size < 5 + 1)\n+        ASSERT (result != buf);\n+      ASSERT (memcmp (buf + size, &\"DEADBEEF\"[size], 8 - size) == 0);\n+      if (result != buf)\n+        free (result);\n+    }\n+\n+  /* Note: This test assumes IEEE 754 representation of 'double' floats.  */\n+  for (size = 0; size <= 8; size++)\n+    {\n+      size_t length;\n+      char *result;\n+\n+      memcpy (buf, \"DEADBEEF\", 8);\n+      length = size;\n+      result = my_asnprintf (buf, &length, \"%2.0f\", 1.6314159265358979e+125);\n+      ASSERT (result != NULL);\n+      ASSERT (strcmp (result, \"163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208\") == 0);\n+      ASSERT (length == 126);\n+      if (size < 126 + 1)\n         ASSERT (result != buf);\n       ASSERT (memcmp (buf + size, &\"DEADBEEF\"[size], 8 - size) == 0);\n       if (result != buf)"
        }
    ],
    "parent_commit_sha": "9e43f06a96907348ac6729dcddf8fddc08469ab3"
}