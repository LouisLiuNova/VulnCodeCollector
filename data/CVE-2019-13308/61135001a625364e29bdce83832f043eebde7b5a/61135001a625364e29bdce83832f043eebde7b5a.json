{
    "owner": "ImageMagick",
    "repo": "ImageMagick",
    "commit_sha": "61135001a625364e29bdce83832f043eebde7b5a",
    "commit_massage": "https://github.com/ImageMagick/ImageMagick/issues/1595",
    "raw_ref": "https://api.github.com/repos/ImageMagick/ImageMagick/commits/61135001a625364e29bdce83832f043eebde7b5a",
    "html_ref": "https://github.com/ImageMagick/ImageMagick/commit/61135001a625364e29bdce83832f043eebde7b5a",
    "author": "Cristy",
    "changes_stats": {
        "total": 40,
        "additions": 19,
        "deletions": 21
    },
    "files": [
        {
            "sha": "24b3824201fb05db48d9d8a9469d3255cbe3f024",
            "filename": "MagickCore/fourier.c",
            "status": "modified",
            "additions": 15,
            "deletions": 19,
            "changes": 34,
            "blob_url": "https://github.com/ImageMagick/ImageMagick/blob/61135001a625364e29bdce83832f043eebde7b5a/MagickCore%2Ffourier.c",
            "raw_url": "https://github.com/ImageMagick/ImageMagick/raw/61135001a625364e29bdce83832f043eebde7b5a/MagickCore%2Ffourier.c",
            "contents_url": "https://api.github.com/repos/ImageMagick/ImageMagick/contents/MagickCore%2Ffourier.c?ref=61135001a625364e29bdce83832f043eebde7b5a",
            "patch": "@@ -226,9 +226,9 @@ MagickExport Image *ComplexImages(const Image *images,const ComplexOperator op,\n   progress=0;\n #if defined(MAGICKCORE_OPENMP_SUPPORT)\n   #pragma omp parallel for schedule(static) shared(progress,status) \\\n-    magick_number_threads(images,complex_images,images->rows,1L)\n+    magick_number_threads(Cr_image,complex_images,Cr_image->rows,1L)\n #endif\n-  for (y=0; y < (ssize_t) images->rows; y++)\n+  for (y=0; y < (ssize_t) Cr_image->rows; y++)\n   {\n     register const Quantum\n       *magick_restrict Ai,\n@@ -245,14 +245,10 @@ MagickExport Image *ComplexImages(const Image *images,const ComplexOperator op,\n \n     if (status == MagickFalse)\n       continue;\n-    Ar=GetCacheViewVirtualPixels(Ar_view,0,y,\n-      MagickMax(Ar_image->columns,Cr_image->columns),1,exception);\n-    Ai=GetCacheViewVirtualPixels(Ai_view,0,y,\n-      MagickMax(Ai_image->columns,Ci_image->columns),1,exception);\n-    Br=GetCacheViewVirtualPixels(Br_view,0,y,\n-      MagickMax(Br_image->columns,Cr_image->columns),1,exception);\n-    Bi=GetCacheViewVirtualPixels(Bi_view,0,y,\n-      MagickMax(Bi_image->columns,Ci_image->columns),1,exception);\n+    Ar=GetCacheViewVirtualPixels(Ar_view,0,y,Cr_image->columns,1,exception);\n+    Ai=GetCacheViewVirtualPixels(Ai_view,0,y,Cr_image->columns,1,exception);\n+    Br=GetCacheViewVirtualPixels(Br_view,0,y,Cr_image->columns,1,exception);\n+    Bi=GetCacheViewVirtualPixels(Bi_view,0,y,Cr_image->columns,1,exception);\n     Cr=QueueCacheViewAuthenticPixels(Cr_view,0,y,Cr_image->columns,1,exception);\n     Ci=QueueCacheViewAuthenticPixels(Ci_view,0,y,Ci_image->columns,1,exception);\n     if ((Ar == (const Quantum *) NULL) || (Ai == (const Quantum *) NULL) || \n@@ -262,12 +258,12 @@ MagickExport Image *ComplexImages(const Image *images,const ComplexOperator op,\n         status=MagickFalse;\n         continue;\n       }\n-    for (x=0; x < (ssize_t) images->columns; x++)\n+    for (x=0; x < (ssize_t) Cr_image->columns; x++)\n     {\n       register ssize_t\n         i;\n \n-      for (i=0; i < (ssize_t) GetPixelChannels(images); i++)\n+      for (i=0; i < (ssize_t) GetPixelChannels(Cr_image); i++)\n       {\n         switch (op)\n         {\n@@ -289,21 +285,21 @@ MagickExport Image *ComplexImages(const Image *images,const ComplexOperator op,\n             double\n               gamma;\n \n-            gamma=PerceptibleReciprocal(Br[i]*Br[i]+Bi[i]*Bi[i]+snr);\n-            Cr[i]=gamma*(Ar[i]*Br[i]+Ai[i]*Bi[i]);\n-            Ci[i]=gamma*(Ai[i]*Br[i]-Ar[i]*Bi[i]);\n+            gamma=PerceptibleReciprocal((double) Br[i]*Br[i]+Bi[i]*Bi[i]+snr);\n+            Cr[i]=gamma*((double) Ar[i]*Br[i]+(double) Ai[i]*Bi[i]);\n+            Ci[i]=gamma*((double) Ai[i]*Br[i]-(double) Ar[i]*Bi[i]);\n             break;\n           }\n           case MagnitudePhaseComplexOperator:\n           {\n-            Cr[i]=sqrt(Ar[i]*Ar[i]+Ai[i]*Ai[i]);\n-            Ci[i]=atan2(Ai[i],Ar[i])/(2.0*MagickPI)+0.5;\n+            Cr[i]=sqrt((double) Ar[i]*Ar[i]+(double) Ai[i]*Ai[i]);\n+            Ci[i]=atan2((double) Ai[i],(double) Ar[i])/(2.0*MagickPI)+0.5;\n             break;\n           }\n           case MultiplyComplexOperator:\n           {\n-            Cr[i]=QuantumScale*(Ar[i]*Br[i]-Ai[i]*Bi[i]);\n-            Ci[i]=QuantumScale*(Ai[i]*Br[i]+Ar[i]*Bi[i]);\n+            Cr[i]=QuantumScale*((double) Ar[i]*Br[i]-(double) Ai[i]*Bi[i]);\n+            Ci[i]=QuantumScale*((double) Ai[i]*Br[i]+(double) Ar[i]*Bi[i]);\n             break;\n           }\n           case RealImaginaryComplexOperator:"
        },
        {
            "sha": "056c4d2fcf5381010e9c3407bd5c5a083d50f917",
            "filename": "coders/gif.c",
            "status": "modified",
            "additions": 4,
            "deletions": 2,
            "changes": 6,
            "blob_url": "https://github.com/ImageMagick/ImageMagick/blob/61135001a625364e29bdce83832f043eebde7b5a/coders%2Fgif.c",
            "raw_url": "https://github.com/ImageMagick/ImageMagick/raw/61135001a625364e29bdce83832f043eebde7b5a/coders%2Fgif.c",
            "contents_url": "https://api.github.com/repos/ImageMagick/ImageMagick/contents/coders%2Fgif.c?ref=61135001a625364e29bdce83832f043eebde7b5a",
            "patch": "@@ -673,13 +673,15 @@ static MagickBooleanType EncodeImage(const ImageInfo *image_info,Image *image,\n       /*\n         Probe hash table.\n       */\n+      next_pixel=MagickFalse;\n+      displacement=1;\n       index=(Quantum) ((size_t) GetPixelIndex(image,p) & 0xff);\n       p+=GetPixelChannels(image);\n       k=(ssize_t) (((size_t) index << (MaxGIFBits-8))+waiting_code);\n       if (k >= MaxHashTable)\n         k-=MaxHashTable;\n-      next_pixel=MagickFalse;\n-      displacement=1;\n+      if (k < 0)\n+        continue;\n       if (hash_code[k] > 0)\n         {\n           if ((hash_prefix[k] == waiting_code) &&"
        }
    ],
    "parent_commit_sha": "b88e300799058d7a5f09efef89519591d9f3ada2"
}