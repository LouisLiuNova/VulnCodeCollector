{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "6817ae225cd650fb1c3295d769298c38b1eba818",
    "commit_massage": "USB: whiteheat: Added bounds checking for bulk command response\n\nThis patch fixes a potential security issue in the whiteheat USB driver\nwhich might allow a local attacker to cause kernel memory corrpution. This\nis due to an unchecked memcpy into a fixed size buffer (of 64 bytes). On\nEHCI and XHCI busses it's possible to craft responses greater than 64\nbytes leading a buffer overflow.\n\nSigned-off-by: James Forshaw <forshaw@google.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/6817ae225cd650fb1c3295d769298c38b1eba818",
    "html_ref": "https://github.com/torvalds/linux/commit/6817ae225cd650fb1c3295d769298c38b1eba818",
    "author": "James Forshaw",
    "changes_stats": {
        "total": 7,
        "additions": 6,
        "deletions": 1
    },
    "files": [
        {
            "sha": "6c3734d2b45a7a9ca24557a586ba10135b7cadb3",
            "filename": "drivers/usb/serial/whiteheat.c",
            "status": "modified",
            "additions": 6,
            "deletions": 1,
            "changes": 7,
            "blob_url": "https://github.com/torvalds/linux/blob/6817ae225cd650fb1c3295d769298c38b1eba818/drivers%2Fusb%2Fserial%2Fwhiteheat.c",
            "raw_url": "https://github.com/torvalds/linux/raw/6817ae225cd650fb1c3295d769298c38b1eba818/drivers%2Fusb%2Fserial%2Fwhiteheat.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/drivers%2Fusb%2Fserial%2Fwhiteheat.c?ref=6817ae225cd650fb1c3295d769298c38b1eba818",
            "patch": "@@ -514,6 +514,10 @@ static void command_port_read_callback(struct urb *urb)\n \t\tdev_dbg(&urb->dev->dev, \"%s - command_info is NULL, exiting.\\n\", __func__);\n \t\treturn;\n \t}\n+\tif (!urb->actual_length) {\n+\t\tdev_dbg(&urb->dev->dev, \"%s - empty response, exiting.\\n\", __func__);\n+\t\treturn;\n+\t}\n \tif (status) {\n \t\tdev_dbg(&urb->dev->dev, \"%s - nonzero urb status: %d\\n\", __func__, status);\n \t\tif (status != -ENOENT)\n@@ -534,7 +538,8 @@ static void command_port_read_callback(struct urb *urb)\n \t\t/* These are unsolicited reports from the firmware, hence no\n \t\t   waiting command to wakeup */\n \t\tdev_dbg(&urb->dev->dev, \"%s - event received\\n\", __func__);\n-\t} else if (data[0] == WHITEHEAT_GET_DTR_RTS) {\n+\t} else if ((data[0] == WHITEHEAT_GET_DTR_RTS) &&\n+\t\t(urb->actual_length - 1 <= sizeof(command_info->result_buffer))) {\n \t\tmemcpy(command_info->result_buffer, &data[1],\n \t\t\t\t\t\turb->actual_length - 1);\n \t\tcommand_info->command_finished = WHITEHEAT_CMD_COMPLETE;"
        }
    ],
    "parent_commit_sha": "c3d3af52904b789cecd5a3915f0593bdbdc8dc58"
}