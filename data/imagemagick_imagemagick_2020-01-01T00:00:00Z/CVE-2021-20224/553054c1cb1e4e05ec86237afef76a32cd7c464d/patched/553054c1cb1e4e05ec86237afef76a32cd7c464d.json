{
    "owner": "ImageMagick",
    "repo": "ImageMagick6",
    "commit_sha": "553054c1cb1e4e05ec86237afef76a32cd7c464d",
    "commit_massage": "https://github.com/ImageMagick/ImageMagick/pull/3083",
    "raw_ref": "https://api.github.com/repos/ImageMagick/ImageMagick6/commits/553054c1cb1e4e05ec86237afef76a32cd7c464d",
    "html_ref": "https://github.com/ImageMagick/ImageMagick6/commit/553054c1cb1e4e05ec86237afef76a32cd7c464d",
    "author": "Cristy",
    "changes_stats": {
        "total": 69,
        "additions": 37,
        "deletions": 32
    },
    "files": [
        {
            "sha": "dc85b97af8bb66f9fb3dd794888319c46750333b",
            "filename": "magick/quantum-export.c",
            "status": "modified",
            "additions": 37,
            "deletions": 32,
            "changes": 69,
            "blob_url": "https://github.com/ImageMagick/ImageMagick6/blob/553054c1cb1e4e05ec86237afef76a32cd7c464d/magick%2Fquantum-export.c",
            "raw_url": "https://github.com/ImageMagick/ImageMagick6/raw/553054c1cb1e4e05ec86237afef76a32cd7c464d/magick%2Fquantum-export.c",
            "contents_url": "https://api.github.com/repos/ImageMagick/ImageMagick6/contents/magick%2Fquantum-export.c?ref=553054c1cb1e4e05ec86237afef76a32cd7c464d",
            "patch": "@@ -2516,21 +2516,21 @@ static void ExportIndexQuantum(const Image *image,QuantumInfo *quantum_info,\n \n       for (x=((ssize_t) number_pixels-7); x > 0; x-=8)\n       {\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q=((pixel & 0x01) << 7);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 6);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 5);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 4);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 3);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 2);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 1);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 0);\n         q++;\n       }\n@@ -2539,7 +2539,7 @@ static void ExportIndexQuantum(const Image *image,QuantumInfo *quantum_info,\n           *q='\\0';\n           for (bit=7; bit >= (ssize_t) (8-(number_pixels % 8)); bit--)\n           {\n-            pixel=(unsigned char) *indexes++;\n+            pixel=(unsigned char) ((ssize_t) *indexes++);\n             *q|=((pixel & 0x01) << (unsigned char) bit);\n           }\n           q++;\n@@ -2553,15 +2553,15 @@ static void ExportIndexQuantum(const Image *image,QuantumInfo *quantum_info,\n \n       for (x=0; x < (ssize_t) (number_pixels-1) ; x+=2)\n       {\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q=((pixel & 0xf) << 4);\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0xf) << 0);\n         q++;\n       }\n       if ((number_pixels % 2) != 0)\n         {\n-          pixel=(unsigned char) *indexes++;\n+          pixel=(unsigned char) ((ssize_t) *indexes++);\n           *q=((pixel & 0xf) << 4);\n           q++;\n         }\n@@ -2669,25 +2669,25 @@ static void ExportIndexAlphaQuantum(const Image *image,\n \n       for (x=((ssize_t) number_pixels-3); x > 0; x-=4)\n       {\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q=((pixel & 0x01) << 7);\n         pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)\n           TransparentOpacity ? 1 : 0);\n         *q|=((pixel & 0x01) << 6);\n         p++;\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 5);\n         pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)\n           TransparentOpacity ? 1 : 0);\n         *q|=((pixel & 0x01) << 4);\n         p++;\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 3);\n         pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)\n           TransparentOpacity ? 1 : 0);\n         *q|=((pixel & 0x01) << 2);\n         p++;\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q|=((pixel & 0x01) << 1);\n         pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)\n           TransparentOpacity ? 1 : 0);\n@@ -2700,7 +2700,7 @@ static void ExportIndexAlphaQuantum(const Image *image,\n           *q='\\0';\n           for (bit=3; bit >= (ssize_t) (4-(number_pixels % 4)); bit-=2)\n           {\n-            pixel=(unsigned char) *indexes++;\n+            pixel=(unsigned char) ((ssize_t) *indexes++);\n             *q|=((pixel & 0x01) << (unsigned char) (bit+4));\n             pixel=(unsigned char) (GetPixelOpacity(p) == (Quantum)\n               TransparentOpacity ? 1 : 0);\n@@ -2718,10 +2718,10 @@ static void ExportIndexAlphaQuantum(const Image *image,\n \n       for (x=0; x < (ssize_t) number_pixels ; x++)\n       {\n-        pixel=(unsigned char) *indexes++;\n+        pixel=(unsigned char) ((ssize_t) *indexes++);\n         *q=((pixel & 0xf) << 4);\n-        pixel=(unsigned char) (16*QuantumScale*((Quantum) (QuantumRange-\n-          GetPixelOpacity(p)))+0.5);\n+        pixel=(unsigned char) ((ssize_t) (16*QuantumScale*((Quantum)\n+          (QuantumRange-GetPixelOpacity(p)))+0.5));\n         *q|=((pixel & 0xf) << 0);\n         p++;\n         q++;\n@@ -2752,7 +2752,8 @@ static void ExportIndexAlphaQuantum(const Image *image,\n         {\n           for (x=0; x < (ssize_t) number_pixels; x++)\n           {\n-            q=PopShortPixel(quantum_info->endian,(unsigned short) GetPixelIndex(indexes+x),q);\n+            q=PopShortPixel(quantum_info->endian,(unsigned short)\n+              ((ssize_t) GetPixelIndex(indexes+x)),q);\n             pixel=SinglePrecisionToHalf(QuantumScale*GetPixelAlpha(p));\n             q=PopShortPixel(quantum_info->endian,pixel,q);\n             p++;\n@@ -2762,7 +2763,8 @@ static void ExportIndexAlphaQuantum(const Image *image,\n         }\n       for (x=0; x < (ssize_t) number_pixels; x++)\n       {\n-        q=PopShortPixel(quantum_info->endian,(unsigned short) GetPixelIndex(indexes+x),q);\n+        q=PopShortPixel(quantum_info->endian,(unsigned short)\n+          ((ssize_t) GetPixelIndex(indexes+x)),q);\n         pixel=ScaleQuantumToShort((Quantum) (QuantumRange-GetPixelOpacity(p)));\n         q=PopShortPixel(quantum_info->endian,pixel,q);\n         p++;\n@@ -2792,7 +2794,8 @@ static void ExportIndexAlphaQuantum(const Image *image,\n         }\n       for (x=0; x < (ssize_t) number_pixels; x++)\n       {\n-        q=PopLongPixel(quantum_info->endian,(unsigned int) GetPixelIndex(indexes+x),q);\n+        q=PopLongPixel(quantum_info->endian,(unsigned int)\n+          GetPixelIndex(indexes+x),q);\n         pixel=ScaleQuantumToLong((Quantum) (QuantumRange-GetPixelOpacity(p)));\n         q=PopLongPixel(quantum_info->endian,pixel,q);\n         p++;\n@@ -2827,10 +2830,9 @@ static void ExportIndexAlphaQuantum(const Image *image,\n       range=GetQuantumRange(quantum_info->depth);\n       for (x=0; x < (ssize_t) number_pixels; x++)\n       {\n-        q=PopQuantumPixel(quantum_info,\n-          GetPixelIndex(indexes+x),q);\n-        q=PopQuantumPixel(quantum_info,\n-          ScaleQuantumToAny((Quantum) (GetPixelAlpha(p)),range),q);\n+        q=PopQuantumPixel(quantum_info,GetPixelIndex(indexes+x),q);\n+        q=PopQuantumPixel(quantum_info,ScaleQuantumToAny((Quantum)\n+          (GetPixelAlpha(p)),range),q);\n         p++;\n         q+=quantum_info->pad;\n       }\n@@ -3035,8 +3037,8 @@ static void ExportRedQuantum(QuantumInfo *quantum_info,\n       range=GetQuantumRange(quantum_info->depth);\n       for (x=0; x < (ssize_t) number_pixels; x++)\n       {\n-        q=PopQuantumPixel(quantum_info,\n-          ScaleQuantumToAny(GetPixelRed(p),range),q);\n+        q=PopQuantumPixel(quantum_info,ScaleQuantumToAny(GetPixelRed(p),range),\n+          q);\n         p++;\n         q+=quantum_info->pad;\n       }\n@@ -3150,7 +3152,8 @@ static void ExportRGBQuantum(QuantumInfo *quantum_info,\n                 break;\n               }\n             }\n-            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);\n+            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),\n+              q);\n             switch ((x+1) % 3)\n             {\n               default:\n@@ -3171,7 +3174,8 @@ static void ExportRGBQuantum(QuantumInfo *quantum_info,\n                 break;\n               }\n             }\n-            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);\n+            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),\n+              q);\n             q+=quantum_info->pad;\n           }\n           for (bit=0; bit < (ssize_t) (3*number_pixels % 2); bit++)\n@@ -3196,7 +3200,8 @@ static void ExportRGBQuantum(QuantumInfo *quantum_info,\n                 break;\n               }\n             }\n-            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);\n+            q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),\n+              q);\n             q+=quantum_info->pad;\n           }\n           if (bit != 0)"
        }
    ],
    "parent_commit_sha": "833f2e30aa0bca27bc73c08590e951efeef3d2c0"
}