{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "371528caec553785c37f73fa3926ea0de84f986f",
    "commit_massage": "mm: memcg: Correct unregistring of events attached to the same eventfd\n\nThere is an issue when memcg unregisters events that were attached to\nthe same eventfd:\n\n- On the first call mem_cgroup_usage_unregister_event() removes all\n  events attached to a given eventfd, and if there were no events left,\n  thresholds->primary would become NULL;\n\n- Since there were several events registered, cgroups core will call\n  mem_cgroup_usage_unregister_event() again, but now kernel will oops,\n  as the function doesn't expect that threshold->primary may be NULL.\n\nThat's a good question whether mem_cgroup_usage_unregister_event()\nshould actually remove all events in one go, but nowadays it can't\ndo any better as cftype->unregister_event callback doesn't pass\nany private event-associated cookie. So, let's fix the issue by\nsimply checking for threshold->primary.\n\nFWIW, w/o the patch the following oops may be observed:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000004\n IP: [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n Pid: 574, comm: kworker/0:2 Not tainted 3.3.0-rc4+ #9 Bochs Bochs\n RIP: 0010:[<ffffffff810be32c>]  [<ffffffff810be32c>] mem_cgroup_usage_unregister_event+0x9c/0x1f0\n RSP: 0018:ffff88001d0b9d60  EFLAGS: 00010246\n Process kworker/0:2 (pid: 574, threadinfo ffff88001d0b8000, task ffff88001de91cc0)\n Call Trace:\n  [<ffffffff8107092b>] cgroup_event_remove+0x2b/0x60\n  [<ffffffff8103db94>] process_one_work+0x174/0x450\n  [<ffffffff8103e413>] worker_thread+0x123/0x2d0\n\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Anton Vorontsov <anton.vorontsov@linaro.org>\nAcked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCc: Kirill A. Shutemov <kirill@shutemov.name>\nCc: Michal Hocko <mhocko@suse.cz>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/371528caec553785c37f73fa3926ea0de84f986f",
    "html_ref": "https://github.com/torvalds/linux/commit/371528caec553785c37f73fa3926ea0de84f986f",
    "author": "Anton Vorontsov",
    "changes_stats": {
        "total": 5,
        "additions": 4,
        "deletions": 1
    },
    "files": [
        {
            "sha": "228d6461c12ade8941b37416ca867d3df3277acd",
            "filename": "mm/memcontrol.c",
            "status": "modified",
            "additions": 4,
            "deletions": 1,
            "changes": 5,
            "blob_url": "https://github.com/torvalds/linux/blob/371528caec553785c37f73fa3926ea0de84f986f/mm%2Fmemcontrol.c",
            "raw_url": "https://github.com/torvalds/linux/raw/371528caec553785c37f73fa3926ea0de84f986f/mm%2Fmemcontrol.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/mm%2Fmemcontrol.c?ref=371528caec553785c37f73fa3926ea0de84f986f",
            "patch": "@@ -4414,6 +4414,9 @@ static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n \t */\n \tBUG_ON(!thresholds);\n \n+\tif (!thresholds->primary)\n+\t\tgoto unlock;\n+\n \tusage = mem_cgroup_usage(memcg, type == _MEMSWAP);\n \n \t/* Check if a threshold crossed before removing */\n@@ -4462,7 +4465,7 @@ static void mem_cgroup_usage_unregister_event(struct cgroup *cgrp,\n \n \t/* To be sure that nobody uses thresholds */\n \tsynchronize_rcu();\n-\n+unlock:\n \tmutex_unlock(&memcg->thresholds_lock);\n }\n "
        }
    ],
    "parent_commit_sha": "37fbf4bfb826372c3ca6c09d8a015d1fe9f5e186"
}