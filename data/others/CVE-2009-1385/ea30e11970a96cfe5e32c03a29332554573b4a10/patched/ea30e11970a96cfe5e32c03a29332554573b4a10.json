{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "ea30e11970a96cfe5e32c03a29332554573b4a10",
    "commit_massage": "e1000: add missing length check to e1000 receive routine\n\n\tPatch to fix bad length checking in e1000.  E1000 by default does two\nthings:\n\n1) Spans rx descriptors for packets that don't fit into 1 skb on recieve\n2) Strips the crc from a frame by subtracting 4 bytes from the length prior to\ndoing an skb_put\n\nSince the e1000 driver isn't written to support receiving packets that span\nmultiple rx buffers, it checks the End of Packet bit of every frame, and\ndiscards it if its not set.  This places us in a situation where, if we have a\nspanning packet, the first part is discarded, but the second part is not (since\nit is the end of packet, and it passes the EOP bit test).  If the second part of\nthe frame is small (4 bytes or less), we subtract 4 from it to remove its crc,\nunderflow the length, and wind up in skb_over_panic, when we try to skb_put a\nhuge number of bytes into the skb.  This amounts to a remote DOS attack through\ncareful selection of frame size in relation to interface MTU.  The fix for this\nis already in the e1000e driver, as well as the e1000 sourceforge driver, but no\none ever pushed it to e1000.  This is lifted straight from e1000e, and prevents\nsmall frames from causing the underflow described above\n\nSigned-off-by: Neil Horman <nhorman@tuxdriver.com>\nTested-by: Andy Gospodarek <andy@greyhouse.net>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/ea30e11970a96cfe5e32c03a29332554573b4a10",
    "html_ref": "https://github.com/torvalds/linux/commit/ea30e11970a96cfe5e32c03a29332554573b4a10",
    "author": "nhorman",
    "changes_stats": {
        "total": 5,
        "additions": 3,
        "deletions": 2
    },
    "files": [
        {
            "sha": "fffb006b7d95c968d168eb81d2cab697e05ee455",
            "filename": "drivers/net/e1000/e1000_main.c",
            "status": "modified",
            "additions": 3,
            "deletions": 2,
            "changes": 5,
            "blob_url": "https://github.com/torvalds/linux/blob/ea30e11970a96cfe5e32c03a29332554573b4a10/drivers%2Fnet%2Fe1000%2Fe1000_main.c",
            "raw_url": "https://github.com/torvalds/linux/raw/ea30e11970a96cfe5e32c03a29332554573b4a10/drivers%2Fnet%2Fe1000%2Fe1000_main.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/drivers%2Fnet%2Fe1000%2Fe1000_main.c?ref=ea30e11970a96cfe5e32c03a29332554573b4a10",
            "patch": "@@ -4027,8 +4027,9 @@ static bool e1000_clean_rx_irq(struct e1000_adapter *adapter,\n \t\t                 PCI_DMA_FROMDEVICE);\n \n \t\tlength = le16_to_cpu(rx_desc->length);\n-\n-\t\tif (unlikely(!(status & E1000_RXD_STAT_EOP))) {\n+\t\t/* !EOP means multiple descriptors were used to store a single\n+\t\t * packet, also make sure the frame isn't just CRC only */\n+\t\tif (unlikely(!(status & E1000_RXD_STAT_EOP) || (length <= 4))) {\n \t\t\t/* All receives must fit into a single buffer */\n \t\t\tE1000_DBG(\"%s: Receive packet consumed multiple\"\n \t\t\t\t  \" buffers\\n\", netdev->name);"
        }
    ],
    "parent_commit_sha": "5a9a8e32ebe269c71d8d3e78f9435fe7729f38e9"
}