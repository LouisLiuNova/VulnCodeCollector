{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "fdd7b4c3302c93f6833e338903ea77245eb510b4",
    "commit_massage": "r8169: fix crash when large packets are received\n\nMichael Tokarev reported receiving a large packet could crash\na machine with RTL8169 NIC.\n( original thread at http://lkml.org/lkml/2009/6/8/192 )\n\nProblem is this driver tells that NIC frames up to 16383 bytes\ncan be received but provides skb to rx ring allocated with\nsmaller sizes (1536 bytes in case standard 1500 bytes MTU is used)\n\nWhen a frame larger than what was allocated by driver is received,\ndma transfert can occurs past the end of buffer and corrupt\nkernel memory.\n\nFix is to tell to NIC what is the maximum size a frame can be.\n\nThis bug is very old, (before git introduction, linux-2.6.10), and \nshould be backported to stable versions.\n\nReported-by: Michael Tokarev <mjt@tls.msk.ru>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nTested-by: Michael Tokarev <mjt@tls.msk.ru>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/fdd7b4c3302c93f6833e338903ea77245eb510b4",
    "html_ref": "https://github.com/torvalds/linux/commit/fdd7b4c3302c93f6833e338903ea77245eb510b4",
    "author": "Eric Dumazet",
    "changes_stats": {
        "total": 11,
        "additions": 5,
        "deletions": 6
    },
    "files": [
        {
            "sha": "3b19e0ce290fa4b6ba5f53a0b33c23b30ef098f8",
            "filename": "drivers/net/r8169.c",
            "status": "modified",
            "additions": 5,
            "deletions": 6,
            "changes": 11,
            "blob_url": "https://github.com/torvalds/linux/blob/fdd7b4c3302c93f6833e338903ea77245eb510b4/drivers%2Fnet%2Fr8169.c",
            "raw_url": "https://github.com/torvalds/linux/raw/fdd7b4c3302c93f6833e338903ea77245eb510b4/drivers%2Fnet%2Fr8169.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/drivers%2Fnet%2Fr8169.c?ref=fdd7b4c3302c93f6833e338903ea77245eb510b4",
            "patch": "@@ -66,7 +66,6 @@ static const int multicast_filter_limit = 32;\n #define RX_DMA_BURST\t6\t/* Maximum PCI burst, '6' is 1024 */\n #define TX_DMA_BURST\t6\t/* Maximum PCI burst, '6' is 1024 */\n #define EarlyTxThld\t0x3F\t/* 0x3F means NO early transmit */\n-#define RxPacketMaxSize\t0x3FE8\t/* 16K - 1 - ETH_HLEN - VLAN - CRC... */\n #define SafeMtu\t\t0x1c20\t/* ... actually life sucks beyond ~7k */\n #define InterFrameGap\t0x03\t/* 3 means InterFrameGap = the shortest one */\n \n@@ -2357,10 +2356,10 @@ static u16 rtl_rw_cpluscmd(void __iomem *ioaddr)\n \treturn cmd;\n }\n \n-static void rtl_set_rx_max_size(void __iomem *ioaddr)\n+static void rtl_set_rx_max_size(void __iomem *ioaddr, unsigned int rx_buf_sz)\n {\n \t/* Low hurts. Let's disable the filtering. */\n-\tRTL_W16(RxMaxSize, 16383);\n+\tRTL_W16(RxMaxSize, rx_buf_sz);\n }\n \n static void rtl8169_set_magic_reg(void __iomem *ioaddr, unsigned mac_version)\n@@ -2407,7 +2406,7 @@ static void rtl_hw_start_8169(struct net_device *dev)\n \n \tRTL_W8(EarlyTxThres, EarlyTxThld);\n \n-\trtl_set_rx_max_size(ioaddr);\n+\trtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);\n \n \tif ((tp->mac_version == RTL_GIGA_MAC_VER_01) ||\n \t    (tp->mac_version == RTL_GIGA_MAC_VER_02) ||\n@@ -2668,7 +2667,7 @@ static void rtl_hw_start_8168(struct net_device *dev)\n \n \tRTL_W8(EarlyTxThres, EarlyTxThld);\n \n-\trtl_set_rx_max_size(ioaddr);\n+\trtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);\n \n \ttp->cp_cmd |= RTL_R16(CPlusCmd) | PktCntrDisable | INTT_1;\n \n@@ -2846,7 +2845,7 @@ static void rtl_hw_start_8101(struct net_device *dev)\n \n \tRTL_W8(EarlyTxThres, EarlyTxThld);\n \n-\trtl_set_rx_max_size(ioaddr);\n+\trtl_set_rx_max_size(ioaddr, tp->rx_buf_sz);\n \n \ttp->cp_cmd |= rtl_rw_cpluscmd(ioaddr) | PCIMulRW;\n "
        }
    ],
    "parent_commit_sha": "12186be7d2e1106cede1cc728526e3d7998cbe94"
}