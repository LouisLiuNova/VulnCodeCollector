{
    "owner": "torvalds",
    "repo": "linux",
    "commit_sha": "ee9c5cfad29c8a13199962614b9b16f1c4137ac9",
    "commit_massage": "niu: Fix kernel buffer overflow for ETHTOOL_GRXCLSRLALL\n\nniu_get_ethtool_tcam_all() assumes that its output buffer is the right\nsize, and warns before returning if it is not.  However, the output\nbuffer size is under user control and ETHTOOL_GRXCLSRLALL is an\nunprivileged ethtool command.  Therefore this is at least a local\ndenial-of-service vulnerability.\n\nChange it to check before writing each entry and to return an error if\nthe buffer is already full.\n\nCompile-tested only.\n\nSigned-off-by: Ben Hutchings <bhutchings@solarflare.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "raw_ref": "https://api.github.com/repos/torvalds/linux/commits/ee9c5cfad29c8a13199962614b9b16f1c4137ac9",
    "html_ref": "https://github.com/torvalds/linux/commit/ee9c5cfad29c8a13199962614b9b16f1c4137ac9",
    "author": "Ben Hutchings",
    "changes_stats": {
        "total": 16,
        "additions": 6,
        "deletions": 10
    },
    "files": [
        {
            "sha": "340cbec4894321fc8e6257f19dfb5242701e659e",
            "filename": "drivers/net/niu.c",
            "status": "modified",
            "additions": 6,
            "deletions": 10,
            "changes": 16,
            "blob_url": "https://github.com/torvalds/linux/blob/ee9c5cfad29c8a13199962614b9b16f1c4137ac9/drivers%2Fnet%2Fniu.c",
            "raw_url": "https://github.com/torvalds/linux/raw/ee9c5cfad29c8a13199962614b9b16f1c4137ac9/drivers%2Fnet%2Fniu.c",
            "contents_url": "https://api.github.com/repos/torvalds/linux/contents/drivers%2Fnet%2Fniu.c?ref=ee9c5cfad29c8a13199962614b9b16f1c4137ac9",
            "patch": "@@ -7272,32 +7272,28 @@ static int niu_get_ethtool_tcam_all(struct niu *np,\n \tstruct niu_parent *parent = np->parent;\n \tstruct niu_tcam_entry *tp;\n \tint i, idx, cnt;\n-\tu16 n_entries;\n \tunsigned long flags;\n-\n+\tint ret = 0;\n \n \t/* put the tcam size here */\n \tnfc->data = tcam_get_size(np);\n \n \tniu_lock_parent(np, flags);\n-\tn_entries = nfc->rule_cnt;\n \tfor (cnt = 0, i = 0; i < nfc->data; i++) {\n \t\tidx = tcam_get_index(np, i);\n \t\ttp = &parent->tcam[idx];\n \t\tif (!tp->valid)\n \t\t\tcontinue;\n+\t\tif (cnt == nfc->rule_cnt) {\n+\t\t\tret = -EMSGSIZE;\n+\t\t\tbreak;\n+\t\t}\n \t\trule_locs[cnt] = i;\n \t\tcnt++;\n \t}\n \tniu_unlock_parent(np, flags);\n \n-\tif (n_entries != cnt) {\n-\t\t/* print warning, this should not happen */\n-\t\tnetdev_info(np->dev, \"niu%d: In %s(): n_entries[%d] != cnt[%d]!!!\\n\",\n-\t\t\t    np->parent->index, __func__, n_entries, cnt);\n-\t}\n-\n-\treturn 0;\n+\treturn ret;\n }\n \n static int niu_get_nfc(struct net_device *dev, struct ethtool_rxnfc *cmd,"
        }
    ],
    "parent_commit_sha": "6523ce1525e88c598c75a1a6b8c4edddfa9defe8"
}