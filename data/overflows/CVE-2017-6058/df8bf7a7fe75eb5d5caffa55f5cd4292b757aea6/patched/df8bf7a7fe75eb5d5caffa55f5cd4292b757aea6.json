{
    "owner": "qemu",
    "repo": "qemu",
    "commit_sha": "df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
    "commit_massage": "NetRxPkt: Fix memory corruption on VLAN header stripping\n\nThis patch fixed a problem that was introduced in commit eb700029.\n\nWhen net_rx_pkt_attach_iovec() calls eth_strip_vlan()\nthis can result in pkt->ehdr_buf being overflowed, because\nehdr_buf is only sizeof(struct eth_header) bytes large\nbut eth_strip_vlan() can write\nsizeof(struct eth_header) + sizeof(struct vlan_header)\nbytes into it.\n\nDevices affected by this problem: vmxnet3.\n\nCc: qemu-stable@nongnu.org\nReported-by: Peter Maydell <peter.maydell@linaro.org>\nSigned-off-by: Dmitry Fleytman <dmitry@daynix.com>\nSigned-off-by: Jason Wang <jasowang@redhat.com>",
    "raw_ref": "https://api.github.com/repos/qemu/qemu/commits/df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
    "html_ref": "https://github.com/qemu/qemu/commit/df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
    "author": "Dmitry Fleytman",
    "changes_stats": {
        "total": 34,
        "additions": 17,
        "deletions": 17
    },
    "files": [
        {
            "sha": "3361d7ebe085af31fb82abfc0e8a9a34654d6e83",
            "filename": "hw/net/net_rx_pkt.c",
            "status": "modified",
            "additions": 17,
            "deletions": 17,
            "changes": 34,
            "blob_url": "https://github.com/qemu/qemu/blob/df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6/hw%2Fnet%2Fnet_rx_pkt.c",
            "raw_url": "https://github.com/qemu/qemu/raw/df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6/hw%2Fnet%2Fnet_rx_pkt.c",
            "contents_url": "https://api.github.com/repos/qemu/qemu/contents/hw%2Fnet%2Fnet_rx_pkt.c?ref=df8bf7a7fe75eb5d5caffa55f5cd4292b757aea6",
            "patch": "@@ -23,13 +23,13 @@\n \n struct NetRxPkt {\n     struct virtio_net_hdr virt_hdr;\n-    uint8_t ehdr_buf[sizeof(struct eth_header)];\n+    uint8_t ehdr_buf[sizeof(struct eth_header) + sizeof(struct vlan_header)];\n     struct iovec *vec;\n     uint16_t vec_len_total;\n     uint16_t vec_len;\n     uint32_t tot_len;\n     uint16_t tci;\n-    bool vlan_stripped;\n+    size_t ehdr_buf_len;\n     bool has_virt_hdr;\n     eth_pkt_types_e packet_type;\n \n@@ -88,15 +88,13 @@ net_rx_pkt_pull_data(struct NetRxPkt *pkt,\n                         const struct iovec *iov, int iovcnt,\n                         size_t ploff)\n {\n-    if (pkt->vlan_stripped) {\n+    if (pkt->ehdr_buf_len) {\n         net_rx_pkt_iovec_realloc(pkt, iovcnt + 1);\n \n         pkt->vec[0].iov_base = pkt->ehdr_buf;\n-        pkt->vec[0].iov_len = sizeof(pkt->ehdr_buf);\n-\n-        pkt->tot_len =\n-            iov_size(iov, iovcnt) - ploff + sizeof(struct eth_header);\n+        pkt->vec[0].iov_len = pkt->ehdr_buf_len;\n \n+        pkt->tot_len = iov_size(iov, iovcnt) - ploff + pkt->ehdr_buf_len;\n         pkt->vec_len = iov_copy(pkt->vec + 1, pkt->vec_len_total - 1,\n                                 iov, iovcnt, ploff, pkt->tot_len);\n     } else {\n@@ -123,11 +121,12 @@ void net_rx_pkt_attach_iovec(struct NetRxPkt *pkt,\n     uint16_t tci = 0;\n     uint16_t ploff = iovoff;\n     assert(pkt);\n-    pkt->vlan_stripped = false;\n \n     if (strip_vlan) {\n-        pkt->vlan_stripped = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,\n-                                            &ploff, &tci);\n+        pkt->ehdr_buf_len = eth_strip_vlan(iov, iovcnt, iovoff, pkt->ehdr_buf,\n+                                           &ploff, &tci);\n+    } else {\n+        pkt->ehdr_buf_len = 0;\n     }\n \n     pkt->tci = tci;\n@@ -143,12 +142,13 @@ void net_rx_pkt_attach_iovec_ex(struct NetRxPkt *pkt,\n     uint16_t tci = 0;\n     uint16_t ploff = iovoff;\n     assert(pkt);\n-    pkt->vlan_stripped = false;\n \n     if (strip_vlan) {\n-        pkt->vlan_stripped = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,\n-                                               pkt->ehdr_buf,\n-                                               &ploff, &tci);\n+        pkt->ehdr_buf_len = eth_strip_vlan_ex(iov, iovcnt, iovoff, vet,\n+                                              pkt->ehdr_buf,\n+                                              &ploff, &tci);\n+    } else {\n+        pkt->ehdr_buf_len = 0;\n     }\n \n     pkt->tci = tci;\n@@ -161,8 +161,8 @@ void net_rx_pkt_dump(struct NetRxPkt *pkt)\n #ifdef NET_RX_PKT_DEBUG\n     assert(pkt);\n \n-    printf(\"RX PKT: tot_len: %d, vlan_stripped: %d, vlan_tag: %d\\n\",\n-              pkt->tot_len, pkt->vlan_stripped, pkt->tci);\n+    printf(\"RX PKT: tot_len: %d, ehdr_buf_len: %lu, vlan_tag: %d\\n\",\n+              pkt->tot_len, pkt->ehdr_buf_len, pkt->tci);\n #endif\n }\n \n@@ -425,7 +425,7 @@ bool net_rx_pkt_is_vlan_stripped(struct NetRxPkt *pkt)\n {\n     assert(pkt);\n \n-    return pkt->vlan_stripped;\n+    return pkt->ehdr_buf_len ? true : false;\n }\n \n bool net_rx_pkt_has_virt_hdr(struct NetRxPkt *pkt)"
        }
    ],
    "parent_commit_sha": "566342c3125ac2e73abd36c650222318164517ed"
}