{
    "owner": "Perl",
    "repo": "perl5",
    "commit_sha": "34716e2a6ee2af96078d62b065b7785c001194be",
    "commit_massage": "Perl_my_setenv(); handle integer wrap\n\nRT #133204\n\nWean this function off int/I32 and onto UV/Size_t.\nAlso, replace all malloc-ish calls with a wrapper that does\noverflow checks,\n\nIn particular, it was doing (nlen + vlen + 2) which could wrap when\nthe combined length of the environment variable name and value\nexceeded around 0x7fffffff.\n\nThe wrapper check function is probably overkill, but belt and braces...\n\nNB this function has several variant parts, #ifdef'ed by platform\ntype; I have blindly changed the parts that aren't compiled under linux.",
    "raw_ref": "https://api.github.com/repos/Perl/perl5/commits/34716e2a6ee2af96078d62b065b7785c001194be",
    "html_ref": "https://github.com/Perl/perl5/commit/34716e2a6ee2af96078d62b065b7785c001194be",
    "author": "iabyn",
    "changes_stats": {
        "total": 76,
        "additions": 53,
        "deletions": 23
    },
    "files": [
        {
            "sha": "c5c7becc0f1280bfdaba04d09ed95213ad6fdd08",
            "filename": "util.c",
            "status": "modified",
            "additions": 53,
            "deletions": 23,
            "changes": 76,
            "blob_url": "https://github.com/Perl/perl5/blob/34716e2a6ee2af96078d62b065b7785c001194be/util.c",
            "raw_url": "https://github.com/Perl/perl5/raw/34716e2a6ee2af96078d62b065b7785c001194be/util.c",
            "contents_url": "https://api.github.com/repos/Perl/perl5/contents/util.c?ref=34716e2a6ee2af96078d62b065b7785c001194be",
            "patch": "@@ -2061,8 +2061,40 @@ Perl_new_warnings_bitfield(pTHX_ STRLEN *buffer, const char *const bits,\n    *(s+(nlen+1+vlen)) = '\\0'\n \n #ifdef USE_ENVIRON_ARRAY\n-       /* VMS' my_setenv() is in vms.c */\n+\n+/* small wrapper for use by Perl_my_setenv that mallocs, or reallocs if\n+ * 'current' is non-null, with up to three sizes that are added together.\n+ * It handles integer overflow.\n+ */\n+static char *\n+S_env_alloc(void *current, Size_t l1, Size_t l2, Size_t l3, Size_t size)\n+{\n+    void *p;\n+    Size_t sl, l = l1 + l2;\n+\n+    if (l < l2)\n+        goto panic;\n+    l += l3;\n+    if (l < l3)\n+        goto panic;\n+    sl = l * size;\n+    if (sl < l)\n+        goto panic;\n+\n+    p = current\n+            ? safesysrealloc(current, sl)\n+            : safesysmalloc(sl);\n+    if (p)\n+        return (char*)p;\n+\n+  panic:\n+    croak_memory_wrap();\n+}\n+\n+\n+/* VMS' my_setenv() is in vms.c */\n #if !defined(WIN32) && !defined(NETWARE)\n+\n void\n Perl_my_setenv(pTHX_ const char *nam, const char *val)\n {\n@@ -2078,28 +2110,27 @@ Perl_my_setenv(pTHX_ const char *nam, const char *val)\n #ifndef PERL_USE_SAFE_PUTENV\n     if (!PL_use_safe_putenv) {\n         /* most putenv()s leak, so we manipulate environ directly */\n-        I32 i;\n-        const I32 len = strlen(nam);\n-        int nlen, vlen;\n+        UV i;\n+        Size_t vlen, nlen = strlen(nam);\n \n         /* where does it go? */\n         for (i = 0; environ[i]; i++) {\n-            if (strnEQ(environ[i],nam,len) && environ[i][len] == '=')\n+            if (strnEQ(environ[i], nam, nlen) && environ[i][nlen] == '=')\n                 break;\n         }\n \n         if (environ == PL_origenviron) {   /* need we copy environment? */\n-            I32 j;\n-            I32 max;\n+            UV j, max;\n             char **tmpenv;\n \n             max = i;\n             while (environ[max])\n                 max++;\n-            tmpenv = (char**)safesysmalloc((max+2) * sizeof(char*));\n+            /* XXX shouldn't that be max+1 rather than max+2 ??? - DAPM */\n+            tmpenv = (char**)S_env_alloc(NULL, max, 2, 0, sizeof(char*));\n             for (j=0; j<max; j++) {         /* copy environment */\n-                const int len = strlen(environ[j]);\n-                tmpenv[j] = (char*)safesysmalloc((len+1)*sizeof(char));\n+                const Size_t len = strlen(environ[j]);\n+                tmpenv[j] = S_env_alloc(NULL, len, 1, 0, 1);\n                 Copy(environ[j], tmpenv[j], len+1, char);\n             }\n             tmpenv[max] = NULL;\n@@ -2118,15 +2149,15 @@ Perl_my_setenv(pTHX_ const char *nam, const char *val)\n #endif\n         }\n         if (!environ[i]) {                 /* does not exist yet */\n-            environ = (char**)safesysrealloc(environ, (i+2) * sizeof(char*));\n+            environ = (char**)S_env_alloc(environ, i, 2, 0, sizeof(char*));\n             environ[i+1] = NULL;    /* make sure it's null terminated */\n         }\n         else\n             safesysfree(environ[i]);\n-        nlen = strlen(nam);\n+\n         vlen = strlen(val);\n \n-        environ[i] = (char*)safesysmalloc((nlen+vlen+2) * sizeof(char));\n+        environ[i] = S_env_alloc(NULL, nlen, vlen, 2, 1);\n         /* all that work just for this */\n         my_setenv_format(environ[i], nam, nlen, val, vlen);\n     } else {\n@@ -2150,22 +2181,21 @@ Perl_my_setenv(pTHX_ const char *nam, const char *val)\n             if (environ) /* old glibc can crash with null environ */\n                 (void)unsetenv(nam);\n         } else {\n-\t    const int nlen = strlen(nam);\n-\t    const int vlen = strlen(val);\n-\t    char * const new_env =\n-                (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n+\t    const Size_t nlen = strlen(nam);\n+\t    const Size_t vlen = strlen(val);\n+\t    char * const new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n             my_setenv_format(new_env, nam, nlen, val, vlen);\n             (void)putenv(new_env);\n         }\n #   else /* ! HAS_UNSETENV */\n         char *new_env;\n-\tconst int nlen = strlen(nam);\n-\tint vlen;\n+\tconst Size_t nlen = strlen(nam);\n+\tSize_t vlen;\n         if (!val) {\n \t   val = \"\";\n         }\n         vlen = strlen(val);\n-        new_env = (char*)safesysmalloc((nlen + vlen + 2) * sizeof(char));\n+        new_env = S_env_alloc(NULL, nlen, vlen, 2, 1);\n         /* all that work just for this */\n         my_setenv_format(new_env, nam, nlen, val, vlen);\n         (void)putenv(new_env);\n@@ -2187,14 +2217,14 @@ Perl_my_setenv(pTHX_ const char *nam, const char *val)\n {\n     dVAR;\n     char *envstr;\n-    const int nlen = strlen(nam);\n-    int vlen;\n+    const Size_t nlen = strlen(nam);\n+    Size_t vlen;\n \n     if (!val) {\n        val = \"\";\n     }\n     vlen = strlen(val);\n-    Newx(envstr, nlen+vlen+2, char);\n+    envstr = S_env_alloc(NULL, nlen, vlen, 2, 1);\n     my_setenv_format(envstr, nam, nlen, val, vlen);\n     (void)PerlEnv_putenv(envstr);\n     Safefree(envstr);"
        }
    ],
    "parent_commit_sha": "957a9e817d29a86f12809f29f95d467754b8707b"
}